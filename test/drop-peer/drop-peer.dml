# 
# drop-peer.dml
#
# Two ASes, each with one BGP-speaking router.  The Keep Alive Timer Interval
# for one BGP speaker is much longer than for the other, so that the
# one with the shorter intervals won't receive KeepAlive messages often
# enough and will think no peer exists, thus dropping the connection.
#
#        router          router
# 
#        1:1(1) }------{ 2:1(1)
#

_schema [ _find .schemas.Net ]

Net [  # the all-encompassing Net
  
  frequency 1000000000   # nanosecond simulation frequency

  bgpoptions [
    validation_test 0      # prints messages associated with this test
    auto_reconnect false   # so that they don't try to re-establish a session
  ]

  Net [
    id 1
    AS_status boundary
    router [
      id 1
      graph [
        ProtocolSession [
          name bgp  use  SSF.OS.BGP4.BGPSession
          autoconfig false
          connretry_time 120  min_as_orig_time 15
          reflector false
          neighbor [
            as 2  address 1(1)  use_return_address 1(1)
            hold_time 90  keep_alive_time 30  mrai 30
            infilter  [ _extends .filters.permit_all ]
            outfilter [ _extends .filters.permit_all ]
          ]
        ]
        ProtocolSession [ name socket use SSF.OS.Socket.socketMaster ]
        ProtocolSession [ name tcp    use SSF.OS.TCP.tcpSessionMaster ]
        ProtocolSession [ name ip     use SSF.OS.IP ]
      ]
      interface [ id 0  virtual true ]
      interface [ id 1 ]
    ]
  ]

  Net [
    id 2
    AS_status boundary
    router [
      id 1
      graph [
        ProtocolSession [
          name bgp  use  SSF.OS.BGP4.BGPSession
          autoconfig false
          connretry_time 120  min_as_orig_time 15
          reflector false
          neighbor [
            as 1  address 1(1)  use_return_address 1(1)
            hold_time 90  keep_alive_time 200  mrai 30
            infilter  [ _extends .filters.permit_all ]
            outfilter [ _extends .filters.permit_all ]
          ]
        ]
        ProtocolSession [ name socket use SSF.OS.Socket.socketMaster ]
        ProtocolSession [ name tcp    use SSF.OS.TCP.tcpSessionMaster ]
        ProtocolSession [ name ip     use SSF.OS.IP ]
      ]
      interface [ id 0  virtual true ]
      interface [ id 1 ]
    ]
  ]

  link [ attach 1:1(1) attach 2:1(1) delay 0.03 ]

] # end of all-encompassing Net
